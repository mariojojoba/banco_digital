#include <stdio.h>
#include <string.h>

// Estrutura para armazenar os dados dos clientes
typedef struct {
    char nome[50];
    char cpf[12];
    char senha[15];
    float saldo;
    int transacoes;
    int contaAtiva;
    int bloqueada;
} Cliente;

// Funções
void bloqueio_e_Desbloqueio_de_Clientes(Cliente clientes[], int quantidade, int n);
void sacar(Cliente clientes[], int quantidade);
void transferir(Cliente clientes[], int quantidade);

int main() {
    Cliente clientes[3] = {
        {"Carlos Silva", "12345678901", "senha123", 5000.0, 0, 1, 0},
        {"Ana Souza", "98765432100", "senha456", 3000.0, 0, 1, 0},
        {"Marcos Lima", "11122233344", "senha789", 1000.0, 0, 1, 1} // Conta bloqueada
    };
    
    int opcao;
    do {
        printf("\n=== Menu do Banco ===\n");
        printf("1. Bloquear/Desbloquear conta\n");
        printf("2. Sacar\n");
        printf("3. Transferir\n");
        printf("4. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        
        switch (opcao) {
            case 1:
                printf("Digite 0 para desbloquear ou 1 para bloquear: ");
                int escolha;
                scanf("%d", &escolha);
                bloqueio_e_Desbloqueio_de_Clientes(clientes, 3, escolha);
                break;
            case 2:
                sacar(clientes, 3);
                break;
            case 3:
                transferir(clientes, 3);
                break;
            case 4:
                printf("Saindo...\n");
                break;
            default:
                printf("Opção inválida!\n");
        }
    } while (opcao != 4);
    
    return 0;
}

// Função para bloquear ou desbloquear a conta
void bloqueio_e_Desbloqueio_de_Clientes(Cliente clientes[], int quantidade, int n) {
    char entrada[50];
    printf("Contas bloqueadas:\n");
    for (int i = 0; i < quantidade; i++) {
        if (clientes[i].bloqueada) {
            printf("Nome: %s, CPF: %s\n", clientes[i].nome, clientes[i].cpf);
        }
    }
    printf("\nContas desbloqueadas:\n");
    for (int i = 0; i < quantidade; i++) {
        if (!clientes[i].bloqueada) {
            printf("Nome: %s, CPF: %s\n", clientes[i].nome, clientes[i].cpf);
        }
    }
    
    if (n == 0) {
        printf("\nDeseja desbloquear uma conta? (s/n): ");
        char resposta;
        scanf(" %c", &resposta);
        if (resposta == 's' || resposta == 'S') {
            printf("Digite o nome ou CPF da conta para desbloquear: ");
            scanf("%s", entrada);
            for (int i = 0; i < quantidade; i++) {
                if (strcmp(clientes[i].nome, entrada) == 0 || strcmp(clientes[i].cpf, entrada) == 0) {
                    clientes[i].bloqueada = 0;
                    printf("Conta de %s desbloqueada.\n", clientes[i].nome);
                    return;
                }
            }
            printf("Conta não encontrada.\n");
        }
    } else {
        printf("\nDigite o nome ou CPF da conta para bloquear: ");
        scanf("%s", entrada);
        for (int i = 0; i < quantidade; i++) {
            if (strcmp(clientes[i].nome, entrada) == 0 || strcmp(clientes[i].cpf, entrada) == 0) {
                clientes[i].bloqueada = 1;
                printf("Conta de %s bloqueada.\n", clientes[i].nome);
                return;
            }
        }
        printf("Conta não encontrada.\n");
    }
}

// Função para realizar saque
void sacar(Cliente clientes[], int quantidade) {
    char cpf[12], senha[15];
    float valor;
    
    printf("Digite seu CPF: ");
    scanf("%s", cpf);
    printf("Digite sua senha: ");
    scanf("%s", senha);
    
    for (int i = 0; i < quantidade; i++) {
        if (strcmp(clientes[i].cpf, cpf) == 0 && strcmp(clientes[i].senha, senha) == 0) {
            printf("Digite o valor do saque: ");
            scanf("%f", &valor);
            if (clientes[i].saldo >= valor) {
                clientes[i].saldo -= valor;
                printf("Saque realizado! Novo saldo: %.2f\n", clientes[i].saldo);
            } else {
                printf("Saldo insuficiente!\n");
            }
            return;
        }
    }
    printf("CPF ou senha incorretos!\n");
}

// Função para realizar transferência
void transferir(Cliente clientes[], int quantidade) {
    char cpfOrigem[12], senha[15], cpfDestino[12];
    float valor;
    
    printf("Digite seu CPF: ");
    scanf("%s", cpfOrigem);
    printf("Digite sua senha: ");
    scanf("%s", senha);
    
    int indiceOrigem = -1, indiceDestino = -1;
    for (int i = 0; i < quantidade; i++) {
        if (strcmp(clientes[i].cpf, cpfOrigem) == 0 && strcmp(clientes[i].senha, senha) == 0) {
            indiceOrigem = i;
        }
    }
    
    if (indiceOrigem == -1) {
        printf("CPF ou senha incorretos!\n");
        return;
    }
    
    printf("Digite o CPF do destinatário: ");
    scanf("%s", cpfDestino);
    
    for (int i = 0; i < quantidade; i++) {
        if (strcmp(clientes[i].cpf, cpfDestino) == 0) {
            indiceDestino = i;
        }
    }
    
    if (indiceDestino == -1) {
        printf("Conta de destino não encontrada!\n");
        return;
    }
    
    printf("Destinatário: %s\n", clientes[indiceDestino].nome);
    printf("Digite o valor da transferência: ");
    scanf("%f", &valor);
    
    if (clientes[indiceOrigem].saldo >= valor) {
        clientes[indiceOrigem].saldo -= valor;
        clientes[indiceDestino].saldo += valor;
        printf("Transferência realizada com sucesso! Novo saldo: %.2f\n", clientes[indiceOrigem].saldo);
    } else {
        printf("Saldo insuficiente!\n");
    }
}
